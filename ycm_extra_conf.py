import os
import ycm_core
import subprocess

# list of include flags obtained by running: echo | clang -E -v -x c++ -
warnings = [
    '-Wall',
    '-Werror',
    "-Wextra", # reasonable and standard
    "-Wshadow",# warn the user if a variable declaration shadows one from a
    "-Wnon-virtual-dtor", # warn the user if a class with virtual functions has a
                         # non-virtual destructor. This helps catch hard to
                         # track down memory errors
    "-Wold-style-cast", # warn for c-style casts
    "-Wcast-align", # warn for potential performance problem casts
    "-Wunused", # warn on anything being unused
    "-Woverloaded-virtual", # warn if you overload (not override) a virtual
    "-Wpedantic", # warn if non-standard C++ is used
    "-Wconversion", # warn on type conversions that may lose data
    "-Wsign-conversion", # warn on sign conversions
    "-Wnull-dereference", # warn if a null dereference is detected
    "-Wdouble-promotion", # warn if float is implicit promoted to double
    "-Wformat=2", # warn on security issues around functions that format output
    ]

# retrieves system includes from compiler
def get_default_includes():
    magic_command = 'clang++ -E -x c++ - -v < /dev/null 2>&1  | egrep "^\s+\/" | sed -e "s/ //g"'
    includes = ["-isystem" + str(include) for include in
                    subprocess.check_output(magic_command, shell=True).splitlines()]
    return includes

def get_default_flags(filename):
    result = get_default_includes()
    result.append('-I' +
            os.path.abspath(
                os.path.join(os.path.dirname(filename), '../include')))
    return result  + ["-xc++", "-std=c++17"] + warnings

# points to build directory where compile_commands.json will be generated
# assumes standard project structure
compilation_database_folder = os.path.join(os.path.abspath(os.path.dirname(__file__)), "build")

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.C', '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

# copy pasted from other .ycm_extra_conf.py files
# does not seem very pretty but kind of works with compile db output
def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.H', '.h', '.hxx', '.hpp', '.hh' ]

# does nothing for private headers,
# for public headers goes to the impl directory: see the project structure docs
def find_matching_source_dir(header_file):
    return os.path.join(os.path.dirname(header_file), "../src")


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
      base_dir = find_matching_source_dir(filename)
      file_without_ext = os.path.splitext(os.path.basename(filename))[0]
      for extension in SOURCE_EXTENSIONS:
        replacement_file = os.path.join(base_dir, file_without_ext + extension)
        if os.path.exists( replacement_file ):
          compilation_info = database.GetCompilationInfoForFile(
            replacement_file )
          if compilation_info.compiler_flags_:
            return compilation_info
      return None
  return database.GetCompilationInfoForFile( filename )

# returns union of compilation db flags for file + default ones
def FlagsForFile( filename, **kwargs ):
  final_flags = []
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if(compilation_info):
      final_flags = MakeRelativePathsInFlagsAbsolute(
        compilation_info.compiler_flags_,
        compilation_info.compiler_working_dir_ )
      if(final_flags):
        final_flags = final_flags[:1] + get_default_includes() + final_flags[1:]
  if not final_flags: # default the flags so that at least boost / stl works`
    final_flags = get_default_flags(filename)
  return {
    'flags': final_flags,
    'do_cache': True
  }

